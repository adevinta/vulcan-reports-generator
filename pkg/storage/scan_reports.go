// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package storage

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ScanReport is an object representing the database table.
type ScanReport struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ScanID         string    `boil:"scan_id" json:"scan_id" toml:"scan_id" yaml:"scan_id"`
	Report         string    `boil:"report" json:"report" toml:"report" yaml:"report"`
	ReportJSON     string    `boil:"report_json" json:"report_json" toml:"report_json" yaml:"report_json"`
	EmailSubject   string    `boil:"email_subject" json:"email_subject" toml:"email_subject" yaml:"email_subject"`
	EmailBody      string    `boil:"email_body" json:"email_body" toml:"email_body" yaml:"email_body"`
	DeliveredTo    string    `boil:"delivered_to" json:"delivered_to" toml:"delivered_to" yaml:"delivered_to"`
	UpdateStatusAt time.Time `boil:"update_status_at" json:"update_status_at" toml:"update_status_at" yaml:"update_status_at"`
	Status         string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ProgramName    string    `boil:"program_name" json:"program_name" toml:"program_name" yaml:"program_name"`
	Risk           int       `boil:"risk" json:"risk" toml:"risk" yaml:"risk"`

	R *scanReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scanReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScanReportColumns = struct {
	ID             string
	ScanID         string
	Report         string
	ReportJSON     string
	EmailSubject   string
	EmailBody      string
	DeliveredTo    string
	UpdateStatusAt string
	Status         string
	CreatedAt      string
	UpdatedAt      string
	ProgramName    string
	Risk           string
}{
	ID:             "id",
	ScanID:         "scan_id",
	Report:         "report",
	ReportJSON:     "report_json",
	EmailSubject:   "email_subject",
	EmailBody:      "email_body",
	DeliveredTo:    "delivered_to",
	UpdateStatusAt: "update_status_at",
	Status:         "status",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	ProgramName:    "program_name",
	Risk:           "risk",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var ScanReportWhere = struct {
	ID             whereHelperstring
	ScanID         whereHelperstring
	Report         whereHelperstring
	ReportJSON     whereHelperstring
	EmailSubject   whereHelperstring
	EmailBody      whereHelperstring
	DeliveredTo    whereHelperstring
	UpdateStatusAt whereHelpertime_Time
	Status         whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	ProgramName    whereHelperstring
	Risk           whereHelperint
}{
	ID:             whereHelperstring{field: "\"scan_reports\".\"id\""},
	ScanID:         whereHelperstring{field: "\"scan_reports\".\"scan_id\""},
	Report:         whereHelperstring{field: "\"scan_reports\".\"report\""},
	ReportJSON:     whereHelperstring{field: "\"scan_reports\".\"report_json\""},
	EmailSubject:   whereHelperstring{field: "\"scan_reports\".\"email_subject\""},
	EmailBody:      whereHelperstring{field: "\"scan_reports\".\"email_body\""},
	DeliveredTo:    whereHelperstring{field: "\"scan_reports\".\"delivered_to\""},
	UpdateStatusAt: whereHelpertime_Time{field: "\"scan_reports\".\"update_status_at\""},
	Status:         whereHelperstring{field: "\"scan_reports\".\"status\""},
	CreatedAt:      whereHelpertime_Time{field: "\"scan_reports\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"scan_reports\".\"updated_at\""},
	ProgramName:    whereHelperstring{field: "\"scan_reports\".\"program_name\""},
	Risk:           whereHelperint{field: "\"scan_reports\".\"risk\""},
}

// ScanReportRels is where relationship names are stored.
var ScanReportRels = struct {
}{}

// scanReportR is where relationships are stored.
type scanReportR struct {
}

// NewStruct creates a new relationship struct
func (*scanReportR) NewStruct() *scanReportR {
	return &scanReportR{}
}

// scanReportL is where Load methods for each relationship are stored.
type scanReportL struct{}

var (
	scanReportAllColumns            = []string{"id", "scan_id", "report", "report_json", "email_subject", "email_body", "delivered_to", "update_status_at", "status", "created_at", "updated_at", "program_name", "risk"}
	scanReportColumnsWithoutDefault = []string{"scan_id", "status", "program_name"}
	scanReportColumnsWithDefault    = []string{"id", "report", "report_json", "email_subject", "email_body", "delivered_to", "update_status_at", "created_at", "updated_at", "risk"}
	scanReportPrimaryKeyColumns     = []string{"id"}
)

type (
	// ScanReportSlice is an alias for a slice of pointers to ScanReport.
	// This should generally be used opposed to []ScanReport.
	ScanReportSlice []*ScanReport

	scanReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scanReportType                 = reflect.TypeOf(&ScanReport{})
	scanReportMapping              = queries.MakeStructMapping(scanReportType)
	scanReportPrimaryKeyMapping, _ = queries.BindMapping(scanReportType, scanReportMapping, scanReportPrimaryKeyColumns)
	scanReportInsertCacheMut       sync.RWMutex
	scanReportInsertCache          = make(map[string]insertCache)
	scanReportUpdateCacheMut       sync.RWMutex
	scanReportUpdateCache          = make(map[string]updateCache)
	scanReportUpsertCacheMut       sync.RWMutex
	scanReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single scanReport record from the query using the global executor.
func (q scanReportQuery) OneG(ctx context.Context) (*ScanReport, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single scanReport record from the query.
func (q scanReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ScanReport, error) {
	o := &ScanReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "storage: failed to execute a one query for scan_reports")
	}

	return o, nil
}

// AllG returns all ScanReport records from the query using the global executor.
func (q scanReportQuery) AllG(ctx context.Context) (ScanReportSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ScanReport records from the query.
func (q scanReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScanReportSlice, error) {
	var o []*ScanReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "storage: failed to assign all query results to ScanReport slice")
	}

	return o, nil
}

// CountG returns the count of all ScanReport records in the query, and panics on error.
func (q scanReportQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ScanReport records in the query.
func (q scanReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "storage: failed to count scan_reports rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q scanReportQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q scanReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "storage: failed to check if scan_reports exists")
	}

	return count > 0, nil
}

// ScanReports retrieves all the records using an executor.
func ScanReports(mods ...qm.QueryMod) scanReportQuery {
	mods = append(mods, qm.From("\"scan_reports\""))
	return scanReportQuery{NewQuery(mods...)}
}

// FindScanReportG retrieves a single record by ID.
func FindScanReportG(ctx context.Context, iD string, selectCols ...string) (*ScanReport, error) {
	return FindScanReport(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindScanReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScanReport(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ScanReport, error) {
	scanReportObj := &ScanReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"scan_reports\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, scanReportObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "storage: unable to select from scan_reports")
	}

	return scanReportObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ScanReport) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ScanReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("storage: no scan_reports provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(scanReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scanReportInsertCacheMut.RLock()
	cache, cached := scanReportInsertCache[key]
	scanReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scanReportAllColumns,
			scanReportColumnsWithDefault,
			scanReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scanReportType, scanReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scanReportType, scanReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"scan_reports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"scan_reports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "storage: unable to insert into scan_reports")
	}

	if !cached {
		scanReportInsertCacheMut.Lock()
		scanReportInsertCache[key] = cache
		scanReportInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ScanReport record using the global executor.
// See Update for more documentation.
func (o *ScanReport) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ScanReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ScanReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	scanReportUpdateCacheMut.RLock()
	cache, cached := scanReportUpdateCache[key]
	scanReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scanReportAllColumns,
			scanReportPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("storage: unable to update scan_reports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"scan_reports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, scanReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scanReportType, scanReportMapping, append(wl, scanReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "storage: unable to update scan_reports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "storage: failed to get rows affected by update for scan_reports")
	}

	if !cached {
		scanReportUpdateCacheMut.Lock()
		scanReportUpdateCache[key] = cache
		scanReportUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q scanReportQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q scanReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "storage: unable to update all for scan_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "storage: unable to retrieve rows affected for scan_reports")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ScanReportSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScanReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("storage: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scanReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"scan_reports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, scanReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "storage: unable to update all in scanReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "storage: unable to retrieve rows affected all in update all scanReport")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ScanReport) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ScanReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("storage: no scan_reports provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(scanReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scanReportUpsertCacheMut.RLock()
	cache, cached := scanReportUpsertCache[key]
	scanReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			scanReportAllColumns,
			scanReportColumnsWithDefault,
			scanReportColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			scanReportAllColumns,
			scanReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("storage: unable to upsert scan_reports, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(scanReportPrimaryKeyColumns))
			copy(conflict, scanReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"scan_reports\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(scanReportType, scanReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scanReportType, scanReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "storage: unable to upsert scan_reports")
	}

	if !cached {
		scanReportUpsertCacheMut.Lock()
		scanReportUpsertCache[key] = cache
		scanReportUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single ScanReport record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ScanReport) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ScanReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ScanReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("storage: no ScanReport provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), scanReportPrimaryKeyMapping)
	sql := "DELETE FROM \"scan_reports\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "storage: unable to delete from scan_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "storage: failed to get rows affected by delete for scan_reports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scanReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("storage: no scanReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "storage: unable to delete all from scan_reports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "storage: failed to get rows affected by deleteall for scan_reports")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ScanReportSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScanReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scanReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"scan_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scanReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "storage: unable to delete all from scanReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "storage: failed to get rows affected by deleteall for scan_reports")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ScanReport) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("storage: no ScanReport provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ScanReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScanReport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScanReportSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("storage: empty ScanReportSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScanReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScanReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scanReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"scan_reports\".* FROM \"scan_reports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scanReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "storage: unable to reload all in ScanReportSlice")
	}

	*o = slice

	return nil
}

// ScanReportExistsG checks if the ScanReport row exists.
func ScanReportExistsG(ctx context.Context, iD string) (bool, error) {
	return ScanReportExists(ctx, boil.GetContextDB(), iD)
}

// ScanReportExists checks if the ScanReport row exists.
func ScanReportExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"scan_reports\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "storage: unable to check if scan_reports exists")
	}

	return exists, nil
}
